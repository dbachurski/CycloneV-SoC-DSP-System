// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module csr (
        input wire clk,
        input wire arst_n,

        input wire avalon_read,
        input wire avalon_write,
        output logic avalon_waitrequest,
        input wire [9:0] avalon_address,
        input wire [31:0] avalon_writedata,
        input wire [3:0] avalon_byteenable,
        output logic avalon_readdatavalid,
        output logic avalon_writeresponsevalid,
        output logic [31:0] avalon_readdata,
        output logic [1:0] avalon_response,

        input csr_pkg::csr__in_t hwif_in,
        output csr_pkg::csr__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [11:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic [31:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    // Request
    always_comb begin
        cpuif_req = avalon_read | avalon_write;
        cpuif_req_is_wr = avalon_write;
        cpuif_addr = {avalon_address, 2'b0};
        cpuif_wr_data = avalon_writedata;
        for(int i=0; i<4; i++) begin
            cpuif_wr_biten[i*8 +: 8] <= {8{avalon_byteenable[i]}};
        end
        avalon_waitrequest = (cpuif_req_stall_rd & avalon_read) | (cpuif_req_stall_wr & avalon_write);
    end

    // Response
    always_comb begin
        avalon_readdatavalid = cpuif_rd_ack;
        avalon_writeresponsevalid = cpuif_wr_ack;
        avalon_readdata = cpuif_rd_data;
        if(cpuif_rd_err || cpuif_wr_err) begin
            // SLVERR
            avalon_response = 2'b10;
        end else begin
            // OK
            avalon_response = 2'b00;
        end
    end

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct {
        logic IO_CR;
        logic DSP_CR;
        logic DSP_SR;
        logic fir_coeff_0;
        logic fir_coeff_1;
        logic fir_coeff_2;
        logic fir_coeff_3;
        logic fir_coeff_4;
        logic fir_coeff_5;
        logic fir_coeff_6;
        logic fir_coeff_7;
        logic fir_coeff_8;
        logic fir_coeff_9;
        logic fir_coeff_10;
        logic fir_coeff_11;
        logic fir_coeff_12;
        logic fir_coeff_13;
        logic fir_coeff_14;
        logic fir_coeff_15;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;
    logic [31:0] decoded_wr_biten;

    always_comb begin
        decoded_reg_strb.IO_CR = cpuif_req_masked & (cpuif_addr == 12'h0);
        decoded_reg_strb.DSP_CR = cpuif_req_masked & (cpuif_addr == 12'h4);
        decoded_reg_strb.DSP_SR = cpuif_req_masked & (cpuif_addr == 12'h8);
        decoded_reg_strb.fir_coeff_0 = cpuif_req_masked & (cpuif_addr == 12'h100);
        decoded_reg_strb.fir_coeff_1 = cpuif_req_masked & (cpuif_addr == 12'h104);
        decoded_reg_strb.fir_coeff_2 = cpuif_req_masked & (cpuif_addr == 12'h108);
        decoded_reg_strb.fir_coeff_3 = cpuif_req_masked & (cpuif_addr == 12'h10c);
        decoded_reg_strb.fir_coeff_4 = cpuif_req_masked & (cpuif_addr == 12'h110);
        decoded_reg_strb.fir_coeff_5 = cpuif_req_masked & (cpuif_addr == 12'h114);
        decoded_reg_strb.fir_coeff_6 = cpuif_req_masked & (cpuif_addr == 12'h118);
        decoded_reg_strb.fir_coeff_7 = cpuif_req_masked & (cpuif_addr == 12'h11c);
        decoded_reg_strb.fir_coeff_8 = cpuif_req_masked & (cpuif_addr == 12'h120);
        decoded_reg_strb.fir_coeff_9 = cpuif_req_masked & (cpuif_addr == 12'h124);
        decoded_reg_strb.fir_coeff_10 = cpuif_req_masked & (cpuif_addr == 12'h128);
        decoded_reg_strb.fir_coeff_11 = cpuif_req_masked & (cpuif_addr == 12'h12c);
        decoded_reg_strb.fir_coeff_12 = cpuif_req_masked & (cpuif_addr == 12'h130);
        decoded_reg_strb.fir_coeff_13 = cpuif_req_masked & (cpuif_addr == 12'h134);
        decoded_reg_strb.fir_coeff_14 = cpuif_req_masked & (cpuif_addr == 12'h138);
        decoded_reg_strb.fir_coeff_15 = cpuif_req_masked & (cpuif_addr == 12'h13c);
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            struct {
                logic [7:0] next;
                logic load_next;
            } val;
            struct {
                logic [23:0] next;
                logic load_next;
            } res;
        } IO_CR;
        struct {
            struct {
                logic next;
                logic load_next;
            } fir_enable;
            struct {
                logic next;
                logic load_next;
            } dft_enable;
            struct {
                logic next;
                logic load_next;
            } tea_enable;
            struct {
                logic next;
                logic load_next;
            } tea_mode;
            struct {
                logic next;
                logic load_next;
            } dft_reset;
            struct {
                logic [14:0] next;
                logic load_next;
            } dft_number_of_points;
            struct {
                logic [11:0] next;
                logic load_next;
            } res;
        } DSP_CR;
        struct {
            struct {
                logic [2:0] next;
                logic load_next;
            } dft_status;
            struct {
                logic [1:0] next;
                logic load_next;
            } memory_reader_status;
            struct {
                logic [26:0] next;
                logic load_next;
            } res;
        } DSP_SR;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } val;
        } fir_coeff_0;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } val;
        } fir_coeff_1;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } val;
        } fir_coeff_2;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } val;
        } fir_coeff_3;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } val;
        } fir_coeff_4;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } val;
        } fir_coeff_5;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } val;
        } fir_coeff_6;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } val;
        } fir_coeff_7;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } val;
        } fir_coeff_8;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } val;
        } fir_coeff_9;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } val;
        } fir_coeff_10;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } val;
        } fir_coeff_11;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } val;
        } fir_coeff_12;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } val;
        } fir_coeff_13;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } val;
        } fir_coeff_14;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } val;
        } fir_coeff_15;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct {
        struct {
            struct {
                logic [7:0] value;
            } val;
            struct {
                logic [23:0] value;
            } res;
        } IO_CR;
        struct {
            struct {
                logic value;
            } fir_enable;
            struct {
                logic value;
            } dft_enable;
            struct {
                logic value;
            } tea_enable;
            struct {
                logic value;
            } tea_mode;
            struct {
                logic value;
            } dft_reset;
            struct {
                logic [14:0] value;
            } dft_number_of_points;
            struct {
                logic [11:0] value;
            } res;
        } DSP_CR;
        struct {
            struct {
                logic [2:0] value;
            } dft_status;
            struct {
                logic [1:0] value;
            } memory_reader_status;
            struct {
                logic [26:0] value;
            } res;
        } DSP_SR;
        struct {
            struct {
                logic [31:0] value;
            } val;
        } fir_coeff_0;
        struct {
            struct {
                logic [31:0] value;
            } val;
        } fir_coeff_1;
        struct {
            struct {
                logic [31:0] value;
            } val;
        } fir_coeff_2;
        struct {
            struct {
                logic [31:0] value;
            } val;
        } fir_coeff_3;
        struct {
            struct {
                logic [31:0] value;
            } val;
        } fir_coeff_4;
        struct {
            struct {
                logic [31:0] value;
            } val;
        } fir_coeff_5;
        struct {
            struct {
                logic [31:0] value;
            } val;
        } fir_coeff_6;
        struct {
            struct {
                logic [31:0] value;
            } val;
        } fir_coeff_7;
        struct {
            struct {
                logic [31:0] value;
            } val;
        } fir_coeff_8;
        struct {
            struct {
                logic [31:0] value;
            } val;
        } fir_coeff_9;
        struct {
            struct {
                logic [31:0] value;
            } val;
        } fir_coeff_10;
        struct {
            struct {
                logic [31:0] value;
            } val;
        } fir_coeff_11;
        struct {
            struct {
                logic [31:0] value;
            } val;
        } fir_coeff_12;
        struct {
            struct {
                logic [31:0] value;
            } val;
        } fir_coeff_13;
        struct {
            struct {
                logic [31:0] value;
            } val;
        } fir_coeff_14;
        struct {
            struct {
                logic [31:0] value;
            } val;
        } fir_coeff_15;
    } field_storage_t;
    field_storage_t field_storage;

    // Field: csr.IO_CR.val
    always_comb begin
        automatic logic [7:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.IO_CR.val.value;
        load_next_c = '0;
        if(decoded_reg_strb.IO_CR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.IO_CR.val.value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end
        field_combo.IO_CR.val.next = next_c;
        field_combo.IO_CR.val.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.IO_CR.val.value <= 8'h0;
        end else if(field_combo.IO_CR.val.load_next) begin
            field_storage.IO_CR.val.value <= field_combo.IO_CR.val.next;
        end
    end
    assign hwif_out.IO_CR.val.value = field_storage.IO_CR.val.value;
    // Field: csr.IO_CR.res
    always_comb begin
        automatic logic [23:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.IO_CR.res.value;
        load_next_c = '0;
        if(decoded_reg_strb.IO_CR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.IO_CR.res.value & ~decoded_wr_biten[31:8]) | (decoded_wr_data[31:8] & decoded_wr_biten[31:8]);
            load_next_c = '1;
        end
        field_combo.IO_CR.res.next = next_c;
        field_combo.IO_CR.res.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.IO_CR.res.value <= 24'h0;
        end else if(field_combo.IO_CR.res.load_next) begin
            field_storage.IO_CR.res.value <= field_combo.IO_CR.res.next;
        end
    end
    // Field: csr.DSP_CR.fir_enable
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.DSP_CR.fir_enable.value;
        load_next_c = '0;
        if(decoded_reg_strb.DSP_CR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.DSP_CR.fir_enable.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.DSP_CR.fir_enable.next = next_c;
        field_combo.DSP_CR.fir_enable.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.DSP_CR.fir_enable.value <= 1'h0;
        end else if(field_combo.DSP_CR.fir_enable.load_next) begin
            field_storage.DSP_CR.fir_enable.value <= field_combo.DSP_CR.fir_enable.next;
        end
    end
    assign hwif_out.DSP_CR.fir_enable.value = field_storage.DSP_CR.fir_enable.value;
    // Field: csr.DSP_CR.dft_enable
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.DSP_CR.dft_enable.value;
        load_next_c = '0;
        if(decoded_reg_strb.DSP_CR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.DSP_CR.dft_enable.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.DSP_CR.dft_enable.next = next_c;
        field_combo.DSP_CR.dft_enable.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.DSP_CR.dft_enable.value <= 1'h0;
        end else if(field_combo.DSP_CR.dft_enable.load_next) begin
            field_storage.DSP_CR.dft_enable.value <= field_combo.DSP_CR.dft_enable.next;
        end
    end
    assign hwif_out.DSP_CR.dft_enable.value = field_storage.DSP_CR.dft_enable.value;
    // Field: csr.DSP_CR.tea_enable
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.DSP_CR.tea_enable.value;
        load_next_c = '0;
        if(decoded_reg_strb.DSP_CR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.DSP_CR.tea_enable.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.DSP_CR.tea_enable.next = next_c;
        field_combo.DSP_CR.tea_enable.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.DSP_CR.tea_enable.value <= 1'h0;
        end else if(field_combo.DSP_CR.tea_enable.load_next) begin
            field_storage.DSP_CR.tea_enable.value <= field_combo.DSP_CR.tea_enable.next;
        end
    end
    assign hwif_out.DSP_CR.tea_enable.value = field_storage.DSP_CR.tea_enable.value;
    // Field: csr.DSP_CR.tea_mode
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.DSP_CR.tea_mode.value;
        load_next_c = '0;
        if(decoded_reg_strb.DSP_CR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.DSP_CR.tea_mode.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end
        field_combo.DSP_CR.tea_mode.next = next_c;
        field_combo.DSP_CR.tea_mode.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.DSP_CR.tea_mode.value <= 1'h0;
        end else if(field_combo.DSP_CR.tea_mode.load_next) begin
            field_storage.DSP_CR.tea_mode.value <= field_combo.DSP_CR.tea_mode.next;
        end
    end
    assign hwif_out.DSP_CR.tea_mode.value = field_storage.DSP_CR.tea_mode.value;
    // Field: csr.DSP_CR.dft_reset
    always_comb begin
        automatic logic [0:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.DSP_CR.dft_reset.value;
        load_next_c = '0;
        if(decoded_reg_strb.DSP_CR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.DSP_CR.dft_reset.value & ~decoded_wr_biten[4:4]) | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end else begin // singlepulse clears back to 0
            next_c = '0;
            load_next_c = '1;
        end
        field_combo.DSP_CR.dft_reset.next = next_c;
        field_combo.DSP_CR.dft_reset.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.DSP_CR.dft_reset.value <= 1'h0;
        end else if(field_combo.DSP_CR.dft_reset.load_next) begin
            field_storage.DSP_CR.dft_reset.value <= field_combo.DSP_CR.dft_reset.next;
        end
    end
    assign hwif_out.DSP_CR.dft_reset.value = field_storage.DSP_CR.dft_reset.value;
    // Field: csr.DSP_CR.dft_number_of_points
    always_comb begin
        automatic logic [14:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.DSP_CR.dft_number_of_points.value;
        load_next_c = '0;
        if(decoded_reg_strb.DSP_CR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.DSP_CR.dft_number_of_points.value & ~decoded_wr_biten[19:5]) | (decoded_wr_data[19:5] & decoded_wr_biten[19:5]);
            load_next_c = '1;
        end
        field_combo.DSP_CR.dft_number_of_points.next = next_c;
        field_combo.DSP_CR.dft_number_of_points.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.DSP_CR.dft_number_of_points.value <= 15'h0;
        end else if(field_combo.DSP_CR.dft_number_of_points.load_next) begin
            field_storage.DSP_CR.dft_number_of_points.value <= field_combo.DSP_CR.dft_number_of_points.next;
        end
    end
    assign hwif_out.DSP_CR.dft_number_of_points.value = field_storage.DSP_CR.dft_number_of_points.value;
    // Field: csr.DSP_CR.res
    always_comb begin
        automatic logic [11:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.DSP_CR.res.value;
        load_next_c = '0;
        if(decoded_reg_strb.DSP_CR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.DSP_CR.res.value & ~decoded_wr_biten[31:20]) | (decoded_wr_data[31:20] & decoded_wr_biten[31:20]);
            load_next_c = '1;
        end
        field_combo.DSP_CR.res.next = next_c;
        field_combo.DSP_CR.res.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.DSP_CR.res.value <= 12'h0;
        end else if(field_combo.DSP_CR.res.load_next) begin
            field_storage.DSP_CR.res.value <= field_combo.DSP_CR.res.next;
        end
    end
    // Field: csr.DSP_SR.dft_status
    always_comb begin
        automatic logic [2:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.DSP_SR.dft_status.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.DSP_SR.dft_status.next;
        load_next_c = '1;
        field_combo.DSP_SR.dft_status.next = next_c;
        field_combo.DSP_SR.dft_status.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.DSP_SR.dft_status.value <= 3'h0;
        end else if(field_combo.DSP_SR.dft_status.load_next) begin
            field_storage.DSP_SR.dft_status.value <= field_combo.DSP_SR.dft_status.next;
        end
    end
    assign hwif_out.DSP_SR.dft_status.value = field_storage.DSP_SR.dft_status.value;
    // Field: csr.DSP_SR.memory_reader_status
    always_comb begin
        automatic logic [1:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.DSP_SR.memory_reader_status.value;
        load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.DSP_SR.memory_reader_status.next;
        load_next_c = '1;
        field_combo.DSP_SR.memory_reader_status.next = next_c;
        field_combo.DSP_SR.memory_reader_status.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.DSP_SR.memory_reader_status.value <= 2'h0;
        end else if(field_combo.DSP_SR.memory_reader_status.load_next) begin
            field_storage.DSP_SR.memory_reader_status.value <= field_combo.DSP_SR.memory_reader_status.next;
        end
    end
    assign hwif_out.DSP_SR.memory_reader_status.value = field_storage.DSP_SR.memory_reader_status.value;
    // Field: csr.DSP_SR.res
    always_comb begin
        automatic logic [26:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.DSP_SR.res.value;
        load_next_c = '0;
        if(decoded_reg_strb.DSP_SR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.DSP_SR.res.value & ~decoded_wr_biten[31:5]) | (decoded_wr_data[31:5] & decoded_wr_biten[31:5]);
            load_next_c = '1;
        end
        field_combo.DSP_SR.res.next = next_c;
        field_combo.DSP_SR.res.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.DSP_SR.res.value <= 27'h0;
        end else if(field_combo.DSP_SR.res.load_next) begin
            field_storage.DSP_SR.res.value <= field_combo.DSP_SR.res.next;
        end
    end
    // Field: csr.fir_coeff_0.val
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.fir_coeff_0.val.value;
        load_next_c = '0;
        if(decoded_reg_strb.fir_coeff_0 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.fir_coeff_0.val.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.fir_coeff_0.val.next = next_c;
        field_combo.fir_coeff_0.val.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.fir_coeff_0.val.value <= 32'h0;
        end else if(field_combo.fir_coeff_0.val.load_next) begin
            field_storage.fir_coeff_0.val.value <= field_combo.fir_coeff_0.val.next;
        end
    end
    assign hwif_out.fir_coeff_0.val.value = field_storage.fir_coeff_0.val.value;
    // Field: csr.fir_coeff_1.val
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.fir_coeff_1.val.value;
        load_next_c = '0;
        if(decoded_reg_strb.fir_coeff_1 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.fir_coeff_1.val.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.fir_coeff_1.val.next = next_c;
        field_combo.fir_coeff_1.val.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.fir_coeff_1.val.value <= 32'h0;
        end else if(field_combo.fir_coeff_1.val.load_next) begin
            field_storage.fir_coeff_1.val.value <= field_combo.fir_coeff_1.val.next;
        end
    end
    assign hwif_out.fir_coeff_1.val.value = field_storage.fir_coeff_1.val.value;
    // Field: csr.fir_coeff_2.val
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.fir_coeff_2.val.value;
        load_next_c = '0;
        if(decoded_reg_strb.fir_coeff_2 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.fir_coeff_2.val.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.fir_coeff_2.val.next = next_c;
        field_combo.fir_coeff_2.val.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.fir_coeff_2.val.value <= 32'h0;
        end else if(field_combo.fir_coeff_2.val.load_next) begin
            field_storage.fir_coeff_2.val.value <= field_combo.fir_coeff_2.val.next;
        end
    end
    assign hwif_out.fir_coeff_2.val.value = field_storage.fir_coeff_2.val.value;
    // Field: csr.fir_coeff_3.val
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.fir_coeff_3.val.value;
        load_next_c = '0;
        if(decoded_reg_strb.fir_coeff_3 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.fir_coeff_3.val.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.fir_coeff_3.val.next = next_c;
        field_combo.fir_coeff_3.val.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.fir_coeff_3.val.value <= 32'h0;
        end else if(field_combo.fir_coeff_3.val.load_next) begin
            field_storage.fir_coeff_3.val.value <= field_combo.fir_coeff_3.val.next;
        end
    end
    assign hwif_out.fir_coeff_3.val.value = field_storage.fir_coeff_3.val.value;
    // Field: csr.fir_coeff_4.val
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.fir_coeff_4.val.value;
        load_next_c = '0;
        if(decoded_reg_strb.fir_coeff_4 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.fir_coeff_4.val.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.fir_coeff_4.val.next = next_c;
        field_combo.fir_coeff_4.val.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.fir_coeff_4.val.value <= 32'h0;
        end else if(field_combo.fir_coeff_4.val.load_next) begin
            field_storage.fir_coeff_4.val.value <= field_combo.fir_coeff_4.val.next;
        end
    end
    assign hwif_out.fir_coeff_4.val.value = field_storage.fir_coeff_4.val.value;
    // Field: csr.fir_coeff_5.val
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.fir_coeff_5.val.value;
        load_next_c = '0;
        if(decoded_reg_strb.fir_coeff_5 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.fir_coeff_5.val.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.fir_coeff_5.val.next = next_c;
        field_combo.fir_coeff_5.val.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.fir_coeff_5.val.value <= 32'h0;
        end else if(field_combo.fir_coeff_5.val.load_next) begin
            field_storage.fir_coeff_5.val.value <= field_combo.fir_coeff_5.val.next;
        end
    end
    assign hwif_out.fir_coeff_5.val.value = field_storage.fir_coeff_5.val.value;
    // Field: csr.fir_coeff_6.val
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.fir_coeff_6.val.value;
        load_next_c = '0;
        if(decoded_reg_strb.fir_coeff_6 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.fir_coeff_6.val.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.fir_coeff_6.val.next = next_c;
        field_combo.fir_coeff_6.val.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.fir_coeff_6.val.value <= 32'h0;
        end else if(field_combo.fir_coeff_6.val.load_next) begin
            field_storage.fir_coeff_6.val.value <= field_combo.fir_coeff_6.val.next;
        end
    end
    assign hwif_out.fir_coeff_6.val.value = field_storage.fir_coeff_6.val.value;
    // Field: csr.fir_coeff_7.val
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.fir_coeff_7.val.value;
        load_next_c = '0;
        if(decoded_reg_strb.fir_coeff_7 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.fir_coeff_7.val.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.fir_coeff_7.val.next = next_c;
        field_combo.fir_coeff_7.val.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.fir_coeff_7.val.value <= 32'h0;
        end else if(field_combo.fir_coeff_7.val.load_next) begin
            field_storage.fir_coeff_7.val.value <= field_combo.fir_coeff_7.val.next;
        end
    end
    assign hwif_out.fir_coeff_7.val.value = field_storage.fir_coeff_7.val.value;
    // Field: csr.fir_coeff_8.val
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.fir_coeff_8.val.value;
        load_next_c = '0;
        if(decoded_reg_strb.fir_coeff_8 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.fir_coeff_8.val.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.fir_coeff_8.val.next = next_c;
        field_combo.fir_coeff_8.val.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.fir_coeff_8.val.value <= 32'h0;
        end else if(field_combo.fir_coeff_8.val.load_next) begin
            field_storage.fir_coeff_8.val.value <= field_combo.fir_coeff_8.val.next;
        end
    end
    assign hwif_out.fir_coeff_8.val.value = field_storage.fir_coeff_8.val.value;
    // Field: csr.fir_coeff_9.val
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.fir_coeff_9.val.value;
        load_next_c = '0;
        if(decoded_reg_strb.fir_coeff_9 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.fir_coeff_9.val.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.fir_coeff_9.val.next = next_c;
        field_combo.fir_coeff_9.val.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.fir_coeff_9.val.value <= 32'h0;
        end else if(field_combo.fir_coeff_9.val.load_next) begin
            field_storage.fir_coeff_9.val.value <= field_combo.fir_coeff_9.val.next;
        end
    end
    assign hwif_out.fir_coeff_9.val.value = field_storage.fir_coeff_9.val.value;
    // Field: csr.fir_coeff_10.val
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.fir_coeff_10.val.value;
        load_next_c = '0;
        if(decoded_reg_strb.fir_coeff_10 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.fir_coeff_10.val.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.fir_coeff_10.val.next = next_c;
        field_combo.fir_coeff_10.val.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.fir_coeff_10.val.value <= 32'h0;
        end else if(field_combo.fir_coeff_10.val.load_next) begin
            field_storage.fir_coeff_10.val.value <= field_combo.fir_coeff_10.val.next;
        end
    end
    assign hwif_out.fir_coeff_10.val.value = field_storage.fir_coeff_10.val.value;
    // Field: csr.fir_coeff_11.val
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.fir_coeff_11.val.value;
        load_next_c = '0;
        if(decoded_reg_strb.fir_coeff_11 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.fir_coeff_11.val.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.fir_coeff_11.val.next = next_c;
        field_combo.fir_coeff_11.val.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.fir_coeff_11.val.value <= 32'h0;
        end else if(field_combo.fir_coeff_11.val.load_next) begin
            field_storage.fir_coeff_11.val.value <= field_combo.fir_coeff_11.val.next;
        end
    end
    assign hwif_out.fir_coeff_11.val.value = field_storage.fir_coeff_11.val.value;
    // Field: csr.fir_coeff_12.val
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.fir_coeff_12.val.value;
        load_next_c = '0;
        if(decoded_reg_strb.fir_coeff_12 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.fir_coeff_12.val.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.fir_coeff_12.val.next = next_c;
        field_combo.fir_coeff_12.val.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.fir_coeff_12.val.value <= 32'h0;
        end else if(field_combo.fir_coeff_12.val.load_next) begin
            field_storage.fir_coeff_12.val.value <= field_combo.fir_coeff_12.val.next;
        end
    end
    assign hwif_out.fir_coeff_12.val.value = field_storage.fir_coeff_12.val.value;
    // Field: csr.fir_coeff_13.val
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.fir_coeff_13.val.value;
        load_next_c = '0;
        if(decoded_reg_strb.fir_coeff_13 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.fir_coeff_13.val.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.fir_coeff_13.val.next = next_c;
        field_combo.fir_coeff_13.val.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.fir_coeff_13.val.value <= 32'h0;
        end else if(field_combo.fir_coeff_13.val.load_next) begin
            field_storage.fir_coeff_13.val.value <= field_combo.fir_coeff_13.val.next;
        end
    end
    assign hwif_out.fir_coeff_13.val.value = field_storage.fir_coeff_13.val.value;
    // Field: csr.fir_coeff_14.val
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.fir_coeff_14.val.value;
        load_next_c = '0;
        if(decoded_reg_strb.fir_coeff_14 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.fir_coeff_14.val.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.fir_coeff_14.val.next = next_c;
        field_combo.fir_coeff_14.val.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.fir_coeff_14.val.value <= 32'h0;
        end else if(field_combo.fir_coeff_14.val.load_next) begin
            field_storage.fir_coeff_14.val.value <= field_combo.fir_coeff_14.val.next;
        end
    end
    assign hwif_out.fir_coeff_14.val.value = field_storage.fir_coeff_14.val.value;
    // Field: csr.fir_coeff_15.val
    always_comb begin
        automatic logic [31:0] next_c;
        automatic logic load_next_c;
        next_c = field_storage.fir_coeff_15.val.value;
        load_next_c = '0;
        if(decoded_reg_strb.fir_coeff_15 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.fir_coeff_15.val.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.fir_coeff_15.val.next = next_c;
        field_combo.fir_coeff_15.val.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.fir_coeff_15.val.value <= 32'h0;
        end else if(field_combo.fir_coeff_15.val.load_next) begin
            field_storage.fir_coeff_15.val.value <= field_combo.fir_coeff_15.val.next;
        end
    end
    assign hwif_out.fir_coeff_15.val.value = field_storage.fir_coeff_15.val.value;

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------

    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;

    // Assign readback values to a flattened array
    logic [31:0] readback_array[19];
    assign readback_array[0][7:0] = (decoded_reg_strb.IO_CR && !decoded_req_is_wr) ? field_storage.IO_CR.val.value : '0;
    assign readback_array[0][31:8] = (decoded_reg_strb.IO_CR && !decoded_req_is_wr) ? field_storage.IO_CR.res.value : '0;
    assign readback_array[1][0:0] = (decoded_reg_strb.DSP_CR && !decoded_req_is_wr) ? field_storage.DSP_CR.fir_enable.value : '0;
    assign readback_array[1][1:1] = (decoded_reg_strb.DSP_CR && !decoded_req_is_wr) ? field_storage.DSP_CR.dft_enable.value : '0;
    assign readback_array[1][2:2] = (decoded_reg_strb.DSP_CR && !decoded_req_is_wr) ? field_storage.DSP_CR.tea_enable.value : '0;
    assign readback_array[1][3:3] = (decoded_reg_strb.DSP_CR && !decoded_req_is_wr) ? field_storage.DSP_CR.tea_mode.value : '0;
    assign readback_array[1][4:4] = (decoded_reg_strb.DSP_CR && !decoded_req_is_wr) ? field_storage.DSP_CR.dft_reset.value : '0;
    assign readback_array[1][19:5] = (decoded_reg_strb.DSP_CR && !decoded_req_is_wr) ? field_storage.DSP_CR.dft_number_of_points.value : '0;
    assign readback_array[1][31:20] = (decoded_reg_strb.DSP_CR && !decoded_req_is_wr) ? field_storage.DSP_CR.res.value : '0;
    assign readback_array[2][2:0] = (decoded_reg_strb.DSP_SR && !decoded_req_is_wr) ? field_storage.DSP_SR.dft_status.value : '0;
    assign readback_array[2][4:3] = (decoded_reg_strb.DSP_SR && !decoded_req_is_wr) ? field_storage.DSP_SR.memory_reader_status.value : '0;
    assign readback_array[2][31:5] = (decoded_reg_strb.DSP_SR && !decoded_req_is_wr) ? field_storage.DSP_SR.res.value : '0;
    assign readback_array[3][31:0] = (decoded_reg_strb.fir_coeff_0 && !decoded_req_is_wr) ? field_storage.fir_coeff_0.val.value : '0;
    assign readback_array[4][31:0] = (decoded_reg_strb.fir_coeff_1 && !decoded_req_is_wr) ? field_storage.fir_coeff_1.val.value : '0;
    assign readback_array[5][31:0] = (decoded_reg_strb.fir_coeff_2 && !decoded_req_is_wr) ? field_storage.fir_coeff_2.val.value : '0;
    assign readback_array[6][31:0] = (decoded_reg_strb.fir_coeff_3 && !decoded_req_is_wr) ? field_storage.fir_coeff_3.val.value : '0;
    assign readback_array[7][31:0] = (decoded_reg_strb.fir_coeff_4 && !decoded_req_is_wr) ? field_storage.fir_coeff_4.val.value : '0;
    assign readback_array[8][31:0] = (decoded_reg_strb.fir_coeff_5 && !decoded_req_is_wr) ? field_storage.fir_coeff_5.val.value : '0;
    assign readback_array[9][31:0] = (decoded_reg_strb.fir_coeff_6 && !decoded_req_is_wr) ? field_storage.fir_coeff_6.val.value : '0;
    assign readback_array[10][31:0] = (decoded_reg_strb.fir_coeff_7 && !decoded_req_is_wr) ? field_storage.fir_coeff_7.val.value : '0;
    assign readback_array[11][31:0] = (decoded_reg_strb.fir_coeff_8 && !decoded_req_is_wr) ? field_storage.fir_coeff_8.val.value : '0;
    assign readback_array[12][31:0] = (decoded_reg_strb.fir_coeff_9 && !decoded_req_is_wr) ? field_storage.fir_coeff_9.val.value : '0;
    assign readback_array[13][31:0] = (decoded_reg_strb.fir_coeff_10 && !decoded_req_is_wr) ? field_storage.fir_coeff_10.val.value : '0;
    assign readback_array[14][31:0] = (decoded_reg_strb.fir_coeff_11 && !decoded_req_is_wr) ? field_storage.fir_coeff_11.val.value : '0;
    assign readback_array[15][31:0] = (decoded_reg_strb.fir_coeff_12 && !decoded_req_is_wr) ? field_storage.fir_coeff_12.val.value : '0;
    assign readback_array[16][31:0] = (decoded_reg_strb.fir_coeff_13 && !decoded_req_is_wr) ? field_storage.fir_coeff_13.val.value : '0;
    assign readback_array[17][31:0] = (decoded_reg_strb.fir_coeff_14 && !decoded_req_is_wr) ? field_storage.fir_coeff_14.val.value : '0;
    assign readback_array[18][31:0] = (decoded_reg_strb.fir_coeff_15 && !decoded_req_is_wr) ? field_storage.fir_coeff_15.val.value : '0;

    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<19; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule
