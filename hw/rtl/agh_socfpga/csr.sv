// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module csr (
        input wire clk,
        input wire arst_n,

        input wire avalon_read,
        input wire avalon_write,
        output logic avalon_waitrequest,
        input wire [9:0] avalon_address,
        input wire [31:0] avalon_writedata,
        input wire [3:0] avalon_byteenable,
        output logic avalon_readdatavalid,
        output logic avalon_writeresponsevalid,
        output logic [31:0] avalon_readdata,
        output logic [1:0] avalon_response,

        output csr_pkg::csr__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [11:0] cpuif_addr;
    logic [31:0] cpuif_wr_data;
    logic [31:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [31:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    // Request
    always_comb begin
        cpuif_req = avalon_read | avalon_write;
        cpuif_req_is_wr = avalon_write;
        cpuif_addr = {avalon_address, 2'b0};
        cpuif_wr_data = avalon_writedata;
        for(int i=0; i<4; i++) begin
            cpuif_wr_biten[i*8 +: 8] <= {8{avalon_byteenable[i]}};
        end
        avalon_waitrequest = (cpuif_req_stall_rd & avalon_read) | (cpuif_req_stall_wr & avalon_write);
    end

    // Response
    always_comb begin
        avalon_readdatavalid = cpuif_rd_ack;
        avalon_writeresponsevalid = cpuif_wr_ack;
        avalon_readdata = cpuif_rd_data;
        if(cpuif_rd_err || cpuif_wr_err) begin
            // SLVERR
            avalon_response = 2'b10;
        end else begin
            // OK
            avalon_response = 2'b00;
        end
    end

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct {
        logic IO_CR;
        logic SCRATCHPAD;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_req;
    logic decoded_req_is_wr;
    logic [31:0] decoded_wr_data;
    logic [31:0] decoded_wr_biten;

    always_comb begin
        decoded_reg_strb.IO_CR = cpuif_req_masked & (cpuif_addr == 12'h0);
        decoded_reg_strb.SCRATCHPAD = cpuif_req_masked & (cpuif_addr == 12'h3fc);
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            struct {
                logic [7:0] next;
                logic load_next;
            } val;
        } IO_CR;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } val;
        } SCRATCHPAD;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct {
        struct {
            struct {
                logic [7:0] value;
            } val;
        } IO_CR;
        struct {
            struct {
                logic [31:0] value;
            } val;
        } SCRATCHPAD;
    } field_storage_t;
    field_storage_t field_storage;

    // Field: csr.IO_CR.val
    always_comb begin
        automatic logic [7:0] next_c = field_storage.IO_CR.val.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.IO_CR && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.IO_CR.val.value & ~decoded_wr_biten[7:0]) | (decoded_wr_data[7:0] & decoded_wr_biten[7:0]);
            load_next_c = '1;
        end
        field_combo.IO_CR.val.next = next_c;
        field_combo.IO_CR.val.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.IO_CR.val.value <= 8'h0;
        end else if(field_combo.IO_CR.val.load_next) begin
            field_storage.IO_CR.val.value <= field_combo.IO_CR.val.next;
        end
    end
    assign hwif_out.IO_CR.val.value = field_storage.IO_CR.val.value;
    // Field: csr.SCRATCHPAD.val
    always_comb begin
        automatic logic [31:0] next_c = field_storage.SCRATCHPAD.val.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.SCRATCHPAD && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.SCRATCHPAD.val.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.SCRATCHPAD.val.next = next_c;
        field_combo.SCRATCHPAD.val.load_next = load_next_c;
    end
    always_ff @(posedge clk or negedge arst_n) begin
        if(~arst_n) begin
            field_storage.SCRATCHPAD.val.value <= 32'h0;
        end else if(field_combo.SCRATCHPAD.val.load_next) begin
            field_storage.SCRATCHPAD.val.value <= field_combo.SCRATCHPAD.val.next;
        end
    end

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------

    logic readback_err;
    logic readback_done;
    logic [31:0] readback_data;

    // Assign readback values to a flattened array
    logic [31:0] readback_array[2];
    assign readback_array[0][7:0] = (decoded_reg_strb.IO_CR && !decoded_req_is_wr) ? field_storage.IO_CR.val.value : '0;
    assign readback_array[0][31:8] = '0;
    assign readback_array[1][31:0] = (decoded_reg_strb.SCRATCHPAD && !decoded_req_is_wr) ? field_storage.SCRATCHPAD.val.value : '0;

    // Reduce the array
    always_comb begin
        automatic logic [31:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<2; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule
